<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <!-- Project versioning and parent declaration -->
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.cleanarchitecture</groupId>
  <artifactId>clean-architecture-java-example</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>pom</packaging>

  <!-- Project properties, centralized version management -->
  <properties>
    <!-- Unified version for the whole project -->
    <project.version>1.0-SNAPSHOT</project.version>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- Spring Boot version -->
    <spring-boot.version>3.3.0</spring-boot.version>
    <archunit.version>1.3.0</archunit.version>
    <junit.version>5.8.2</junit.version>
  </properties>

  <dependencies>
    <!-- JUnit 5 依赖 -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <!-- 可选的：JUnit 5 支持的参数化测试 -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <!-- Dependency management for all submodules and dependencies -->
  <dependencyManagement>
    <dependencies>
      <!-- Internal module dependencies (using unified project version) -->
      <dependency>
        <groupId>org.cleanarchitecture</groupId>
        <artifactId>main</artifactId>
        <version>${project.version}</version>
      </dependency>
      <dependency>
        <groupId>org.cleanarchitecture</groupId>
        <artifactId>core</artifactId>
        <version>${project.version}</version> 
      </dependency>
      <dependency>
        <groupId>org.cleanarchitecture</groupId>
        <artifactId>store-in-memory</artifactId>
        <version>${project.version}</version> 
      </dependency>
      <dependency>
        <groupId>org.cleanarchitecture</groupId>
        <artifactId>http-api-spring</artifactId>
        <version>${project.version}</version> 
      </dependency>
      <dependency>
        <groupId>org.cleanarchitecture</groupId>
        <artifactId>http-api-armeria</artifactId>
        <version>${project.version}</version> 
      </dependency>
      <dependency>
        <groupId>org.cleanarchitecture</groupId>
        <artifactId>client</artifactId>
        <version>${project.version}</version> 
      </dependency>
      <dependency>
        <groupId>org.cleanarchitecture</groupId>
        <artifactId>rpc-dubbo-api</artifactId>
        <version>${project.version}</version>
      </dependency>

      <!-- Spring Boot dependency management -->
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring-boot.version}</version> <!-- Use the Spring Boot version from properties -->
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <!-- External dependencies (specific versions defined) -->
      <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-core</artifactId>
        <version>6.5.2.Final</version> <!-- External dependencies can have fixed versions -->
      </dependency>
    </dependencies>
  </dependencyManagement>

  <!-- Modules of the project -->
  <modules>
    <module>core</module>
    <module>infrastructure</module>
    <module>main</module>
    <module>client</module>
    <module>architecture-test</module>
  </modules>

</project>
